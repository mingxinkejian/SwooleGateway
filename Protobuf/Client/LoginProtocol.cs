// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Logic.Protocol {

  /// <summary>Holder for reflection information generated from LoginProtocol.proto</summary>
  public static partial class LoginProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for LoginProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNMb2dpblByb3RvY29sLnByb3RvEg5Mb2dpYy5Qcm90b2NvbBoUUGxheWVy",
            "UHJvdG9jb2wucHJvdG8iqwIKDVBsYXllckVudkluZm8SFQoNY2xpZW50VmVy",
            "c2lvbhgBIAEoDBISCgpzeXN0ZW1Tb2Z0GAIgASgMEhYKDnN5c3RlbUhhcmR3",
            "YXJlGAMgASgMEg8KB3RlbGVjb20YBCABKAwSDwoHbmV0d29yaxgFIAEoDBIT",
            "CgtzY3JlZW5XaWR0aBgGIAEoDBIUCgxzY3JlZW5IZWlnaHQYByABKAwSDwoH",
            "ZGVuc2l0eRgIIAEoDBIPCgdjaGFubmVsGAkgASgMEgwKBHV1aWQYCiABKAwS",
            "EwoLY3B1SGFyZHdhcmUYCyABKAwSDgoGbWVtb3J5GAwgASgMEhAKCGdsUmVu",
            "ZGVyGA0gASgMEhEKCWdsVmVyc2lvbhgOIAEoDBIQCghkZXZpY2VJZBgPIAEo",
            "DCIWCgdQaW5nUmVxEgsKA3VJZBgBIAEoBSI5CghQaW5nUmVzcBILCgNyZXQY",
            "ASABKAUSDwoHc3ZyVGltZRgCIAEoBBIPCgdleHREYXRhGAMgASgMItwBCglS",
            "ZWdpc3RSZXESEAoIdXNlcm5hbWUYASABKAwSEAoIcGFzc3dvcmQYAiABKAwS",
            "DgoGb3BlbklkGAMgASgMEiwKCWxvZ2luVHlwZRgEIAEoDjIZLkxvZ2ljLlBy",
            "b3RvY29sLkxvZ2luVHlwZRI0Cg1wbGF5ZXJFbnZJbmZvGAUgASgLMh0uTG9n",
            "aWMuUHJvdG9jb2wuUGxheWVyRW52SW5mbxImCgZvc1R5cGUYBiABKA4yFi5M",
            "b2dpYy5Qcm90b2NvbC5PU1R5cGUSDwoHY2hhbm5lbBgHIAEoBSI6CgpSZWdp",
            "c3RSZXNwEgsKA3JldBgBIAEoBRILCgN1SWQYAiABKAUSEgoKbG9naW5Ub2tl",
            "bhgDIAEoDCLJAQoLQWNjb3VudEluZm8SCwoDdUlkGAEgASgFEhAKCHVzZXJu",
            "YW1lGAIgASgMEhAKCHBhc3N3b3JkGAMgASgMEg4KBm9wZW5JZBgEIAEoDBIs",
            "Cglsb2dpblR5cGUYBSABKA4yGS5Mb2dpYy5Qcm90b2NvbC5Mb2dpblR5cGUS",
            "JgoGb3NUeXBlGAYgASgOMhYuTG9naWMuUHJvdG9jb2wuT1NUeXBlEg8KB2No",
            "YW5uZWwYByABKAUSEgoKcmVnaXN0VGltZRgIIAEoBCKfAgoITG9naW5SZXES",
            "EAoIdXNlcm5hbWUYASABKAwSEAoIcGFzc3dvcmQYAiABKAwSDgoGb3Blbklk",
            "GAMgASgMEgsKA3VJZBgEIAEoBRISCgpsb2dpblRva2VuGAUgASgMEiwKCWxv",
            "Z2luVHlwZRgGIAEoDjIZLkxvZ2ljLlByb3RvY29sLkxvZ2luVHlwZRI0Cg1w",
            "bGF5ZXJFbnZJbmZvGAcgASgLMh0uTG9naWMuUHJvdG9jb2wuUGxheWVyRW52",
            "SW5mbxISCgpkZXZpY2VDb2RlGAggASgMEiYKBm9zVHlwZRgJIAEoDjIWLkxv",
            "Z2ljLlByb3RvY29sLk9TVHlwZRIPCgdjaGFubmVsGAogASgFEg0KBXN2cklk",
            "GAsgASgFInoKCUxvZ2luUmVzcBILCgNyZXQYASABKAUSLgoKcGxheWVySW5m",
            "bxgCIAEoCzIaLkxvZ2ljLlByb3RvY29sLlBsYXllckluZm8SDwoHc3ZyVGlt",
            "ZRgDIAEoBBIPCgd2ZXJzaW9uGAQgASgMEg4KBmV4dE1zZxgFIAEoDCIYCglM",
            "b2dvdXRSZXESCwoDdUlkGAEgASgFIhkKCkxvZ291dFJlc3ASCwoDcmV0GAEg",
            "ASgFKogBCglMb2dpblR5cGUSFgoSTE9HSU5fVFlQRV9BQ0NPVU5UEAASFgoS",
            "TE9HSU5fVFlQRV9NU0RLX1FREAESFgoSTE9HSU5fVFlQRV9NU0RLX1dYEAIS",
            "FAoQTE9HSU5fVFlQRV9HVUVTVBADEh0KGUxPR0lOX1RZUEVfVEhJUkRfUExB",
            "VEZPUk0QBCp1CgZPU1R5cGUSEwoPT1NfVFlQRV9ERUZBVUxUEAASDgoKT1Nf",
            "VFlQRV9QQxABEg8KC09TX1RZUEVfTUFDEAISDwoLT1NfVFlQRV9XRUIQAxIP",
            "CgtPU19UWVBFX0lPUxAEEhMKD09TX1RZUEVfQU5EUk9JRBAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Logic.Protocol.PlayerProtocolReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Logic.Protocol.LoginType), typeof(global::Logic.Protocol.OSType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.PlayerEnvInfo), global::Logic.Protocol.PlayerEnvInfo.Parser, new[]{ "ClientVersion", "SystemSoft", "SystemHardware", "Telecom", "Network", "ScreenWidth", "ScreenHeight", "Density", "Channel", "Uuid", "CpuHardware", "Memory", "GlRender", "GlVersion", "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.PingReq), global::Logic.Protocol.PingReq.Parser, new[]{ "UId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.PingResp), global::Logic.Protocol.PingResp.Parser, new[]{ "Ret", "SvrTime", "ExtData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.RegistReq), global::Logic.Protocol.RegistReq.Parser, new[]{ "Username", "Password", "OpenId", "LoginType", "PlayerEnvInfo", "OsType", "Channel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.RegistResp), global::Logic.Protocol.RegistResp.Parser, new[]{ "Ret", "UId", "LoginToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.AccountInfo), global::Logic.Protocol.AccountInfo.Parser, new[]{ "UId", "Username", "Password", "OpenId", "LoginType", "OsType", "Channel", "RegistTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.LoginReq), global::Logic.Protocol.LoginReq.Parser, new[]{ "Username", "Password", "OpenId", "UId", "LoginToken", "LoginType", "PlayerEnvInfo", "DeviceCode", "OsType", "Channel", "SvrId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.LoginResp), global::Logic.Protocol.LoginResp.Parser, new[]{ "Ret", "PlayerInfo", "SvrTime", "Version", "ExtMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.LogoutReq), global::Logic.Protocol.LogoutReq.Parser, new[]{ "UId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Logic.Protocol.LogoutResp), global::Logic.Protocol.LogoutResp.Parser, new[]{ "Ret" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///玩家登陆类型
  /// </summary>
  public enum LoginType {
    /// <summary>
    ///默认账号体系
    /// </summary>
    [pbr::OriginalName("LOGIN_TYPE_ACCOUNT")] Account = 0,
    /// <summary>
    ///QQ平台
    /// </summary>
    [pbr::OriginalName("LOGIN_TYPE_MSDK_QQ")] MsdkQq = 1,
    /// <summary>
    ///微信平台
    /// </summary>
    [pbr::OriginalName("LOGIN_TYPE_MSDK_WX")] MsdkWx = 2,
    /// <summary>
    ///游客访问
    /// </summary>
    [pbr::OriginalName("LOGIN_TYPE_GUEST")] Guest = 3,
    /// <summary>
    ///第三方平台
    /// </summary>
    [pbr::OriginalName("LOGIN_TYPE_THIRD_PLATFORM")] ThirdPlatform = 4,
  }

  /// <summary>
  ///终端类型
  /// </summary>
  public enum OSType {
    /// <summary>
    ///默认不使用
    /// </summary>
    [pbr::OriginalName("OS_TYPE_DEFAULT")] Default = 0,
    /// <summary>
    ///PC
    /// </summary>
    [pbr::OriginalName("OS_TYPE_PC")] Pc = 1,
    /// <summary>
    ///Mac
    /// </summary>
    [pbr::OriginalName("OS_TYPE_MAC")] Mac = 2,
    /// <summary>
    ///web
    /// </summary>
    [pbr::OriginalName("OS_TYPE_WEB")] Web = 3,
    /// <summary>
    ///IOS
    /// </summary>
    [pbr::OriginalName("OS_TYPE_IOS")] Ios = 4,
    /// <summary>
    ///安卓
    /// </summary>
    [pbr::OriginalName("OS_TYPE_ANDROID")] Android = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///玩家的设备相关信息，用于日志统计的信息（在玩家注册和登陆时上报该内容）
  /// </summary>
  public sealed partial class PlayerEnvInfo : pb::IMessage<PlayerEnvInfo> {
    private static readonly pb::MessageParser<PlayerEnvInfo> _parser = new pb::MessageParser<PlayerEnvInfo>(() => new PlayerEnvInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEnvInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEnvInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEnvInfo(PlayerEnvInfo other) : this() {
      clientVersion_ = other.clientVersion_;
      systemSoft_ = other.systemSoft_;
      systemHardware_ = other.systemHardware_;
      telecom_ = other.telecom_;
      network_ = other.network_;
      screenWidth_ = other.screenWidth_;
      screenHeight_ = other.screenHeight_;
      density_ = other.density_;
      channel_ = other.channel_;
      uuid_ = other.uuid_;
      cpuHardware_ = other.cpuHardware_;
      memory_ = other.memory_;
      glRender_ = other.glRender_;
      glVersion_ = other.glVersion_;
      deviceId_ = other.deviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEnvInfo Clone() {
      return new PlayerEnvInfo(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private pb::ByteString clientVersion_ = pb::ByteString.Empty;
    /// <summary>
    ///客户端版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemSoft" field.</summary>
    public const int SystemSoftFieldNumber = 2;
    private pb::ByteString systemSoft_ = pb::ByteString.Empty;
    /// <summary>
    ///操作系统版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SystemSoft {
      get { return systemSoft_; }
      set {
        systemSoft_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemHardware" field.</summary>
    public const int SystemHardwareFieldNumber = 3;
    private pb::ByteString systemHardware_ = pb::ByteString.Empty;
    /// <summary>
    ///终端机型设备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SystemHardware {
      get { return systemHardware_; }
      set {
        systemHardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "telecom" field.</summary>
    public const int TelecomFieldNumber = 4;
    private pb::ByteString telecom_ = pb::ByteString.Empty;
    /// <summary>
    ///运营商
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Telecom {
      get { return telecom_; }
      set {
        telecom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 5;
    private pb::ByteString network_ = pb::ByteString.Empty;
    /// <summary>
    ///3G/4G/WIFI/2G
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "screenWidth" field.</summary>
    public const int ScreenWidthFieldNumber = 6;
    private pb::ByteString screenWidth_ = pb::ByteString.Empty;
    /// <summary>
    ///屏幕宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ScreenWidth {
      get { return screenWidth_; }
      set {
        screenWidth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "screenHeight" field.</summary>
    public const int ScreenHeightFieldNumber = 7;
    private pb::ByteString screenHeight_ = pb::ByteString.Empty;
    /// <summary>
    ///屏幕高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ScreenHeight {
      get { return screenHeight_; }
      set {
        screenHeight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "density" field.</summary>
    public const int DensityFieldNumber = 8;
    private pb::ByteString density_ = pb::ByteString.Empty;
    /// <summary>
    ///屏幕像素密度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Density {
      get { return density_; }
      set {
        density_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 9;
    private pb::ByteString channel_ = pb::ByteString.Empty;
    /// <summary>
    ///注册渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 10;
    private pb::ByteString uuid_ = pb::ByteString.Empty;
    /// <summary>
    ///唯一ID(可用MAC、UDID等信息做标识)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpuHardware" field.</summary>
    public const int CpuHardwareFieldNumber = 11;
    private pb::ByteString cpuHardware_ = pb::ByteString.Empty;
    /// <summary>
    ///CPU类型|频率|核数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpuHardware {
      get { return cpuHardware_; }
      set {
        cpuHardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 12;
    private pb::ByteString memory_ = pb::ByteString.Empty;
    /// <summary>
    ///内存大小 单位为MB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Memory {
      get { return memory_; }
      set {
        memory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "glRender" field.</summary>
    public const int GlRenderFieldNumber = 13;
    private pb::ByteString glRender_ = pb::ByteString.Empty;
    /// <summary>
    ///OpenGL render信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GlRender {
      get { return glRender_; }
      set {
        glRender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "glVersion" field.</summary>
    public const int GlVersionFieldNumber = 14;
    private pb::ByteString glVersion_ = pb::ByteString.Empty;
    /// <summary>
    ///OpenGL 版本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GlVersion {
      get { return glVersion_; }
      set {
        glVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 15;
    private pb::ByteString deviceId_ = pb::ByteString.Empty;
    /// <summary>
    ///设备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEnvInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEnvInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (SystemSoft != other.SystemSoft) return false;
      if (SystemHardware != other.SystemHardware) return false;
      if (Telecom != other.Telecom) return false;
      if (Network != other.Network) return false;
      if (ScreenWidth != other.ScreenWidth) return false;
      if (ScreenHeight != other.ScreenHeight) return false;
      if (Density != other.Density) return false;
      if (Channel != other.Channel) return false;
      if (Uuid != other.Uuid) return false;
      if (CpuHardware != other.CpuHardware) return false;
      if (Memory != other.Memory) return false;
      if (GlRender != other.GlRender) return false;
      if (GlVersion != other.GlVersion) return false;
      if (DeviceId != other.DeviceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (SystemSoft.Length != 0) hash ^= SystemSoft.GetHashCode();
      if (SystemHardware.Length != 0) hash ^= SystemHardware.GetHashCode();
      if (Telecom.Length != 0) hash ^= Telecom.GetHashCode();
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (ScreenWidth.Length != 0) hash ^= ScreenWidth.GetHashCode();
      if (ScreenHeight.Length != 0) hash ^= ScreenHeight.GetHashCode();
      if (Density.Length != 0) hash ^= Density.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (CpuHardware.Length != 0) hash ^= CpuHardware.GetHashCode();
      if (Memory.Length != 0) hash ^= Memory.GetHashCode();
      if (GlRender.Length != 0) hash ^= GlRender.GetHashCode();
      if (GlVersion.Length != 0) hash ^= GlVersion.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ClientVersion);
      }
      if (SystemSoft.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SystemSoft);
      }
      if (SystemHardware.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SystemHardware);
      }
      if (Telecom.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Telecom);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Network);
      }
      if (ScreenWidth.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ScreenWidth);
      }
      if (ScreenHeight.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ScreenHeight);
      }
      if (Density.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Density);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Channel);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Uuid);
      }
      if (CpuHardware.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(CpuHardware);
      }
      if (Memory.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(Memory);
      }
      if (GlRender.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(GlRender);
      }
      if (GlVersion.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(GlVersion);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientVersion);
      }
      if (SystemSoft.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SystemSoft);
      }
      if (SystemHardware.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SystemHardware);
      }
      if (Telecom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Telecom);
      }
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Network);
      }
      if (ScreenWidth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ScreenWidth);
      }
      if (ScreenHeight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ScreenHeight);
      }
      if (Density.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Density);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Channel);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Uuid);
      }
      if (CpuHardware.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpuHardware);
      }
      if (Memory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Memory);
      }
      if (GlRender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GlRender);
      }
      if (GlVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GlVersion);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEnvInfo other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.SystemSoft.Length != 0) {
        SystemSoft = other.SystemSoft;
      }
      if (other.SystemHardware.Length != 0) {
        SystemHardware = other.SystemHardware;
      }
      if (other.Telecom.Length != 0) {
        Telecom = other.Telecom;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      if (other.ScreenWidth.Length != 0) {
        ScreenWidth = other.ScreenWidth;
      }
      if (other.ScreenHeight.Length != 0) {
        ScreenHeight = other.ScreenHeight;
      }
      if (other.Density.Length != 0) {
        Density = other.Density;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.CpuHardware.Length != 0) {
        CpuHardware = other.CpuHardware;
      }
      if (other.Memory.Length != 0) {
        Memory = other.Memory;
      }
      if (other.GlRender.Length != 0) {
        GlRender = other.GlRender;
      }
      if (other.GlVersion.Length != 0) {
        GlVersion = other.GlVersion;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClientVersion = input.ReadBytes();
            break;
          }
          case 18: {
            SystemSoft = input.ReadBytes();
            break;
          }
          case 26: {
            SystemHardware = input.ReadBytes();
            break;
          }
          case 34: {
            Telecom = input.ReadBytes();
            break;
          }
          case 42: {
            Network = input.ReadBytes();
            break;
          }
          case 50: {
            ScreenWidth = input.ReadBytes();
            break;
          }
          case 58: {
            ScreenHeight = input.ReadBytes();
            break;
          }
          case 66: {
            Density = input.ReadBytes();
            break;
          }
          case 74: {
            Channel = input.ReadBytes();
            break;
          }
          case 82: {
            Uuid = input.ReadBytes();
            break;
          }
          case 90: {
            CpuHardware = input.ReadBytes();
            break;
          }
          case 98: {
            Memory = input.ReadBytes();
            break;
          }
          case 106: {
            GlRender = input.ReadBytes();
            break;
          }
          case 114: {
            GlVersion = input.ReadBytes();
            break;
          }
          case 122: {
            DeviceId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///心跳包信息
  ///心跳包只有响应，没有请求
  /// </summary>
  public sealed partial class PingReq : pb::IMessage<PingReq> {
    private static readonly pb::MessageParser<PingReq> _parser = new pb::MessageParser<PingReq>(() => new PingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReq(PingReq other) : this() {
      uId_ = other.uId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReq Clone() {
      return new PingReq(this);
    }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private int uId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UId != other.UId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UId != 0) hash ^= UId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingReq other) {
      if (other == null) {
        return;
      }
      if (other.UId != 0) {
        UId = other.UId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PingResp : pb::IMessage<PingResp> {
    private static readonly pb::MessageParser<PingResp> _parser = new pb::MessageParser<PingResp>(() => new PingResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResp(PingResp other) : this() {
      ret_ = other.ret_;
      svrTime_ = other.svrTime_;
      extData_ = other.extData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResp Clone() {
      return new PingResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///返回值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "svrTime" field.</summary>
    public const int SvrTimeFieldNumber = 2;
    private ulong svrTime_;
    /// <summary>
    ///服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SvrTime {
      get { return svrTime_; }
      set {
        svrTime_ = value;
      }
    }

    /// <summary>Field number for the "extData" field.</summary>
    public const int ExtDataFieldNumber = 3;
    private pb::ByteString extData_ = pb::ByteString.Empty;
    /// <summary>
    ///扩展信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtData {
      get { return extData_; }
      set {
        extData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (SvrTime != other.SvrTime) return false;
      if (ExtData != other.ExtData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (SvrTime != 0UL) hash ^= SvrTime.GetHashCode();
      if (ExtData.Length != 0) hash ^= ExtData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (SvrTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SvrTime);
      }
      if (ExtData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ExtData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (SvrTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SvrTime);
      }
      if (ExtData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.SvrTime != 0UL) {
        SvrTime = other.SvrTime;
      }
      if (other.ExtData.Length != 0) {
        ExtData = other.ExtData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            SvrTime = input.ReadUInt64();
            break;
          }
          case 26: {
            ExtData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册请求
  /// </summary>
  public sealed partial class RegistReq : pb::IMessage<RegistReq> {
    private static readonly pb::MessageParser<RegistReq> _parser = new pb::MessageParser<RegistReq>(() => new RegistReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistReq(RegistReq other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      openId_ = other.openId_;
      loginType_ = other.loginType_;
      PlayerEnvInfo = other.playerEnvInfo_ != null ? other.PlayerEnvInfo.Clone() : null;
      osType_ = other.osType_;
      channel_ = other.channel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistReq Clone() {
      return new RegistReq(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private pb::ByteString username_ = pb::ByteString.Empty;
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private pb::ByteString password_ = pb::ByteString.Empty;
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 3;
    private pb::ByteString openId_ = pb::ByteString.Empty;
    /// <summary>
    ///openID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 4;
    private global::Logic.Protocol.LoginType loginType_ = 0;
    /// <summary>
    ///注册类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "playerEnvInfo" field.</summary>
    public const int PlayerEnvInfoFieldNumber = 5;
    private global::Logic.Protocol.PlayerEnvInfo playerEnvInfo_;
    /// <summary>
    ///玩家的机器相关信息（用于数据统计）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.PlayerEnvInfo PlayerEnvInfo {
      get { return playerEnvInfo_; }
      set {
        playerEnvInfo_ = value;
      }
    }

    /// <summary>Field number for the "osType" field.</summary>
    public const int OsTypeFieldNumber = 6;
    private global::Logic.Protocol.OSType osType_ = 0;
    /// <summary>
    ///玩家终端类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.OSType OsType {
      get { return osType_; }
      set {
        osType_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 7;
    private int channel_;
    /// <summary>
    ///第三方渠道号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (OpenId != other.OpenId) return false;
      if (LoginType != other.LoginType) return false;
      if (!object.Equals(PlayerEnvInfo, other.PlayerEnvInfo)) return false;
      if (OsType != other.OsType) return false;
      if (Channel != other.Channel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (playerEnvInfo_ != null) hash ^= PlayerEnvInfo.GetHashCode();
      if (OsType != 0) hash ^= OsType.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Password);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(OpenId);
      }
      if (LoginType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LoginType);
      }
      if (playerEnvInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerEnvInfo);
      }
      if (OsType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) OsType);
      }
      if (Channel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Channel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpenId);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (playerEnvInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerEnvInfo);
      }
      if (OsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OsType);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistReq other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.playerEnvInfo_ != null) {
        if (playerEnvInfo_ == null) {
          playerEnvInfo_ = new global::Logic.Protocol.PlayerEnvInfo();
        }
        PlayerEnvInfo.MergeFrom(other.PlayerEnvInfo);
      }
      if (other.OsType != 0) {
        OsType = other.OsType;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadBytes();
            break;
          }
          case 18: {
            Password = input.ReadBytes();
            break;
          }
          case 26: {
            OpenId = input.ReadBytes();
            break;
          }
          case 32: {
            loginType_ = (global::Logic.Protocol.LoginType) input.ReadEnum();
            break;
          }
          case 42: {
            if (playerEnvInfo_ == null) {
              playerEnvInfo_ = new global::Logic.Protocol.PlayerEnvInfo();
            }
            input.ReadMessage(playerEnvInfo_);
            break;
          }
          case 48: {
            osType_ = (global::Logic.Protocol.OSType) input.ReadEnum();
            break;
          }
          case 56: {
            Channel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册响应
  /// </summary>
  public sealed partial class RegistResp : pb::IMessage<RegistResp> {
    private static readonly pb::MessageParser<RegistResp> _parser = new pb::MessageParser<RegistResp>(() => new RegistResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistResp(RegistResp other) : this() {
      ret_ = other.ret_;
      uId_ = other.uId_;
      loginToken_ = other.loginToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistResp Clone() {
      return new RegistResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///返回值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 2;
    private int uId_;
    /// <summary>
    ///uId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "loginToken" field.</summary>
    public const int LoginTokenFieldNumber = 3;
    private pb::ByteString loginToken_ = pb::ByteString.Empty;
    /// <summary>
    ///登陆Token，通常有登陆服务器的情况下，登陆服务器返回的Token，并用这个Token和网关进行验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LoginToken {
      get { return loginToken_; }
      set {
        loginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (UId != other.UId) return false;
      if (LoginToken != other.LoginToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (UId != 0) hash ^= UId.GetHashCode();
      if (LoginToken.Length != 0) hash ^= LoginToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (UId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UId);
      }
      if (LoginToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(LoginToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UId);
      }
      if (LoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LoginToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.UId != 0) {
        UId = other.UId;
      }
      if (other.LoginToken.Length != 0) {
        LoginToken = other.LoginToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            UId = input.ReadInt32();
            break;
          }
          case 26: {
            LoginToken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///账号信息
  /// </summary>
  public sealed partial class AccountInfo : pb::IMessage<AccountInfo> {
    private static readonly pb::MessageParser<AccountInfo> _parser = new pb::MessageParser<AccountInfo>(() => new AccountInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountInfo(AccountInfo other) : this() {
      uId_ = other.uId_;
      username_ = other.username_;
      password_ = other.password_;
      openId_ = other.openId_;
      loginType_ = other.loginType_;
      osType_ = other.osType_;
      channel_ = other.channel_;
      registTime_ = other.registTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountInfo Clone() {
      return new AccountInfo(this);
    }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private int uId_;
    /// <summary>
    ///uId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private pb::ByteString username_ = pb::ByteString.Empty;
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private pb::ByteString password_ = pb::ByteString.Empty;
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 4;
    private pb::ByteString openId_ = pb::ByteString.Empty;
    /// <summary>
    ///openID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 5;
    private global::Logic.Protocol.LoginType loginType_ = 0;
    /// <summary>
    ///注册类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "osType" field.</summary>
    public const int OsTypeFieldNumber = 6;
    private global::Logic.Protocol.OSType osType_ = 0;
    /// <summary>
    ///终端类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.OSType OsType {
      get { return osType_; }
      set {
        osType_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 7;
    private int channel_;
    /// <summary>
    ///第三方渠道号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "registTime" field.</summary>
    public const int RegistTimeFieldNumber = 8;
    private ulong registTime_;
    /// <summary>
    ///注册时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RegistTime {
      get { return registTime_; }
      set {
        registTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UId != other.UId) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (OpenId != other.OpenId) return false;
      if (LoginType != other.LoginType) return false;
      if (OsType != other.OsType) return false;
      if (Channel != other.Channel) return false;
      if (RegistTime != other.RegistTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UId != 0) hash ^= UId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (OsType != 0) hash ^= OsType.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (RegistTime != 0UL) hash ^= RegistTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Password);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OpenId);
      }
      if (LoginType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LoginType);
      }
      if (OsType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) OsType);
      }
      if (Channel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Channel);
      }
      if (RegistTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(RegistTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpenId);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (OsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OsType);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (RegistTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RegistTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountInfo other) {
      if (other == null) {
        return;
      }
      if (other.UId != 0) {
        UId = other.UId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.OsType != 0) {
        OsType = other.OsType;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.RegistTime != 0UL) {
        RegistTime = other.RegistTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadInt32();
            break;
          }
          case 18: {
            Username = input.ReadBytes();
            break;
          }
          case 26: {
            Password = input.ReadBytes();
            break;
          }
          case 34: {
            OpenId = input.ReadBytes();
            break;
          }
          case 40: {
            loginType_ = (global::Logic.Protocol.LoginType) input.ReadEnum();
            break;
          }
          case 48: {
            osType_ = (global::Logic.Protocol.OSType) input.ReadEnum();
            break;
          }
          case 56: {
            Channel = input.ReadInt32();
            break;
          }
          case 64: {
            RegistTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登陆请求
  /// </summary>
  public sealed partial class LoginReq : pb::IMessage<LoginReq> {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      openId_ = other.openId_;
      uId_ = other.uId_;
      loginToken_ = other.loginToken_;
      loginType_ = other.loginType_;
      PlayerEnvInfo = other.playerEnvInfo_ != null ? other.PlayerEnvInfo.Clone() : null;
      deviceCode_ = other.deviceCode_;
      osType_ = other.osType_;
      channel_ = other.channel_;
      svrId_ = other.svrId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private pb::ByteString username_ = pb::ByteString.Empty;
    /// <summary>
    ///用户名   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private pb::ByteString password_ = pb::ByteString.Empty;
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 3;
    private pb::ByteString openId_ = pb::ByteString.Empty;
    /// <summary>
    ///openId，通常情况下openID为第三方渠道请求后获得的唯一标识，根据业务逻辑和接入渠道情况自行定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 4;
    private int uId_;
    /// <summary>
    ///uId，如果在有单独登陆服务器的情况下，通常uId作为唯一ID标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "loginToken" field.</summary>
    public const int LoginTokenFieldNumber = 5;
    private pb::ByteString loginToken_ = pb::ByteString.Empty;
    /// <summary>
    ///登陆Token，通常有登陆服务器的情况下，登陆服务器返回的Token，并用这个Token和网关进行验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LoginToken {
      get { return loginToken_; }
      set {
        loginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 6;
    private global::Logic.Protocol.LoginType loginType_ = 0;
    /// <summary>
    ///登陆类型（参照上面的枚举）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "playerEnvInfo" field.</summary>
    public const int PlayerEnvInfoFieldNumber = 7;
    private global::Logic.Protocol.PlayerEnvInfo playerEnvInfo_;
    /// <summary>
    ///玩家的机器相关信息（用于数据统计）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.PlayerEnvInfo PlayerEnvInfo {
      get { return playerEnvInfo_; }
      set {
        playerEnvInfo_ = value;
      }
    }

    /// <summary>Field number for the "deviceCode" field.</summary>
    public const int DeviceCodeFieldNumber = 8;
    private pb::ByteString deviceCode_ = pb::ByteString.Empty;
    /// <summary>
    ///用于消息推送使用，一般来说用deviceId即可
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeviceCode {
      get { return deviceCode_; }
      set {
        deviceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "osType" field.</summary>
    public const int OsTypeFieldNumber = 9;
    private global::Logic.Protocol.OSType osType_ = 0;
    /// <summary>
    ///玩家终端类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.OSType OsType {
      get { return osType_; }
      set {
        osType_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 10;
    private int channel_;
    /// <summary>
    ///第三方渠道号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "svrId" field.</summary>
    public const int SvrIdFieldNumber = 11;
    private int svrId_;
    /// <summary>
    ///玩家连接服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SvrId {
      get { return svrId_; }
      set {
        svrId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (OpenId != other.OpenId) return false;
      if (UId != other.UId) return false;
      if (LoginToken != other.LoginToken) return false;
      if (LoginType != other.LoginType) return false;
      if (!object.Equals(PlayerEnvInfo, other.PlayerEnvInfo)) return false;
      if (DeviceCode != other.DeviceCode) return false;
      if (OsType != other.OsType) return false;
      if (Channel != other.Channel) return false;
      if (SvrId != other.SvrId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (UId != 0) hash ^= UId.GetHashCode();
      if (LoginToken.Length != 0) hash ^= LoginToken.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (playerEnvInfo_ != null) hash ^= PlayerEnvInfo.GetHashCode();
      if (DeviceCode.Length != 0) hash ^= DeviceCode.GetHashCode();
      if (OsType != 0) hash ^= OsType.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (SvrId != 0) hash ^= SvrId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Password);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(OpenId);
      }
      if (UId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UId);
      }
      if (LoginToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(LoginToken);
      }
      if (LoginType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LoginType);
      }
      if (playerEnvInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayerEnvInfo);
      }
      if (DeviceCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(DeviceCode);
      }
      if (OsType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) OsType);
      }
      if (Channel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Channel);
      }
      if (SvrId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SvrId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpenId);
      }
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UId);
      }
      if (LoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LoginToken);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (playerEnvInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerEnvInfo);
      }
      if (DeviceCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceCode);
      }
      if (OsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OsType);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (SvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SvrId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.UId != 0) {
        UId = other.UId;
      }
      if (other.LoginToken.Length != 0) {
        LoginToken = other.LoginToken;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.playerEnvInfo_ != null) {
        if (playerEnvInfo_ == null) {
          playerEnvInfo_ = new global::Logic.Protocol.PlayerEnvInfo();
        }
        PlayerEnvInfo.MergeFrom(other.PlayerEnvInfo);
      }
      if (other.DeviceCode.Length != 0) {
        DeviceCode = other.DeviceCode;
      }
      if (other.OsType != 0) {
        OsType = other.OsType;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.SvrId != 0) {
        SvrId = other.SvrId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadBytes();
            break;
          }
          case 18: {
            Password = input.ReadBytes();
            break;
          }
          case 26: {
            OpenId = input.ReadBytes();
            break;
          }
          case 32: {
            UId = input.ReadInt32();
            break;
          }
          case 42: {
            LoginToken = input.ReadBytes();
            break;
          }
          case 48: {
            loginType_ = (global::Logic.Protocol.LoginType) input.ReadEnum();
            break;
          }
          case 58: {
            if (playerEnvInfo_ == null) {
              playerEnvInfo_ = new global::Logic.Protocol.PlayerEnvInfo();
            }
            input.ReadMessage(playerEnvInfo_);
            break;
          }
          case 66: {
            DeviceCode = input.ReadBytes();
            break;
          }
          case 72: {
            osType_ = (global::Logic.Protocol.OSType) input.ReadEnum();
            break;
          }
          case 80: {
            Channel = input.ReadInt32();
            break;
          }
          case 88: {
            SvrId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登陆响应
  /// </summary>
  public sealed partial class LoginResp : pb::IMessage<LoginResp> {
    private static readonly pb::MessageParser<LoginResp> _parser = new pb::MessageParser<LoginResp>(() => new LoginResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp(LoginResp other) : this() {
      ret_ = other.ret_;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      svrTime_ = other.svrTime_;
      version_ = other.version_;
      extMsg_ = other.extMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResp Clone() {
      return new LoginResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///返回码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::Logic.Protocol.PlayerInfo playerInfo_;
    /// <summary>
    ///玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Logic.Protocol.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "svrTime" field.</summary>
    public const int SvrTimeFieldNumber = 3;
    private ulong svrTime_;
    /// <summary>
    ///服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SvrTime {
      get { return svrTime_; }
      set {
        svrTime_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///配置文件版本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extMsg" field.</summary>
    public const int ExtMsgFieldNumber = 5;
    private pb::ByteString extMsg_ = pb::ByteString.Empty;
    /// <summary>
    ///额外信息的返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtMsg {
      get { return extMsg_; }
      set {
        extMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (SvrTime != other.SvrTime) return false;
      if (Version != other.Version) return false;
      if (ExtMsg != other.ExtMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (SvrTime != 0UL) hash ^= SvrTime.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (ExtMsg.Length != 0) hash ^= ExtMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (SvrTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SvrTime);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Version);
      }
      if (ExtMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ExtMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (SvrTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SvrTime);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (ExtMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Logic.Protocol.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.SvrTime != 0UL) {
        SvrTime = other.SvrTime;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.ExtMsg.Length != 0) {
        ExtMsg = other.ExtMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Logic.Protocol.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 24: {
            SvrTime = input.ReadUInt64();
            break;
          }
          case 34: {
            Version = input.ReadBytes();
            break;
          }
          case 42: {
            ExtMsg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登出请求
  /// </summary>
  public sealed partial class LogoutReq : pb::IMessage<LogoutReq> {
    private static readonly pb::MessageParser<LogoutReq> _parser = new pb::MessageParser<LogoutReq>(() => new LogoutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq(LogoutReq other) : this() {
      uId_ = other.uId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq Clone() {
      return new LogoutReq(this);
    }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private int uId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UId != other.UId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UId != 0) hash ^= UId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutReq other) {
      if (other == null) {
        return;
      }
      if (other.UId != 0) {
        UId = other.UId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登出响应
  /// </summary>
  public sealed partial class LogoutResp : pb::IMessage<LogoutResp> {
    private static readonly pb::MessageParser<LogoutResp> _parser = new pb::MessageParser<LogoutResp>(() => new LogoutResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Logic.Protocol.LoginProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResp(LogoutResp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResp Clone() {
      return new LogoutResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
